// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceBPClient is the client API for UserServiceBP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceBPClient interface {
	CreateUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	FindUserById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ListAllUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllUsersResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error)
}

type userServiceBPClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceBPClient(cc grpc.ClientConnInterface) UserServiceBPClient {
	return &userServiceBPClient{cc}
}

func (c *userServiceBPClient) CreateUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserServiceBP/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceBPClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserServiceBP/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceBPClient) FindUserById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/user.UserServiceBP/FindUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceBPClient) ListAllUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListAllUsersResponse, error) {
	out := new(ListAllUsersResponse)
	err := c.cc.Invoke(ctx, "/user.UserServiceBP/ListAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceBPClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/user.UserServiceBP/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceBPServer is the server API for UserServiceBP service.
// All implementations must embed UnimplementedUserServiceBPServer
// for forward compatibility
type UserServiceBPServer interface {
	CreateUser(context.Context, *NewUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	FindUserById(context.Context, *UserRequest) (*UserResponse, error)
	ListAllUsers(context.Context, *Void) (*ListAllUsersResponse, error)
	DeleteUser(context.Context, *UserRequest) (*Void, error)
	mustEmbedUnimplementedUserServiceBPServer()
}

// UnimplementedUserServiceBPServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceBPServer struct {
}

func (UnimplementedUserServiceBPServer) CreateUser(context.Context, *NewUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceBPServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceBPServer) FindUserById(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserById not implemented")
}
func (UnimplementedUserServiceBPServer) ListAllUsers(context.Context, *Void) (*ListAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllUsers not implemented")
}
func (UnimplementedUserServiceBPServer) DeleteUser(context.Context, *UserRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceBPServer) mustEmbedUnimplementedUserServiceBPServer() {}

// UnsafeUserServiceBPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceBPServer will
// result in compilation errors.
type UnsafeUserServiceBPServer interface {
	mustEmbedUnimplementedUserServiceBPServer()
}

func RegisterUserServiceBPServer(s grpc.ServiceRegistrar, srv UserServiceBPServer) {
	s.RegisterService(&UserServiceBP_ServiceDesc, srv)
}

func _UserServiceBP_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceBPServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceBP/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceBPServer).CreateUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceBP_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceBPServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceBP/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceBPServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceBP_FindUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceBPServer).FindUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceBP/FindUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceBPServer).FindUserById(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceBP_ListAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceBPServer).ListAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceBP/ListAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceBPServer).ListAllUsers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceBP_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceBPServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceBP/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceBPServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceBP_ServiceDesc is the grpc.ServiceDesc for UserServiceBP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceBP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserServiceBP",
	HandlerType: (*UserServiceBPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserServiceBP_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserServiceBP_UpdateUser_Handler,
		},
		{
			MethodName: "FindUserById",
			Handler:    _UserServiceBP_FindUserById_Handler,
		},
		{
			MethodName: "ListAllUsers",
			Handler:    _UserServiceBP_ListAllUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserServiceBP_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
